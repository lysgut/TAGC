<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style/st.css">
    <link href="https://fonts.googleapis.com/css2?family=Oswald&display=swap" rel="stylesheet"> <!-- Enlace a Google Fonts aquí -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <title>DNA maker</title>
</head>
<body>
  <style>
    @font-face {
font-family: 'MiFuente'; 
src: url('fuentes/mifuente.ttf') format('truetype'); 

}
body{
font-family: 'MiFuente', sans-serif;
background-color: #AAFFE8 !important;
background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1600 900'%3E%3Cpolygon fill='%231ecc26' points='957 450 539 900 1396 900'/%3E%3Cpolygon fill='%23103b7f' points='957 450 872.9 900 1396 900'/%3E%3Cpolygon fill='%2320c624' points='-60 900 398 662 816 900'/%3E%3Cpolygon fill='%230f4881' points='337 900 398 662 816 900'/%3E%3Cpolygon fill='%2322bf21' points='1203 546 1552 900 876 900'/%3E%3Cpolygon fill='%230e5483' points='1203 546 1552 900 1162 900'/%3E%3Cpolygon fill='%2324b81e' points='641 695 886 900 367 900'/%3E%3Cpolygon fill='%230d5e84' points='587 900 641 695 886 900'/%3E%3Cpolygon fill='%2326b11b' points='1710 900 1401 632 1096 900'/%3E%3Cpolygon fill='%230c6786' points='1710 900 1401 632 1365 900'/%3E%3Cpolygon fill='%2328aa17' points='1210 900 971 687 725 900'/%3E%3Cpolygon fill='%230b6f88' points='943 900 1210 900 971 687'/%3E%3C/svg%3E");
background-attachment: fixed;
background-size: cover;

}
.button1 {
background-color: #AAFFE8;
color: black;
border: 2px solid #4CAF50;
}

</style>
<nav class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <img src="https://static.vecteezy.com/system/resources/previews/000/504/603/original/vector-dna-icon-design.jpg" alt="Logo" width="60" height="48" class="d-inline-block align-text-top">
            ADN maker
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">terapias</a>
        </li>
        
          
    </div>
  </div>
</nav>
<div id="myCarousel" class="carousel slide mb-6" data-bs-ride="carousel">
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
  </div>
  <div class="carousel-inner">
    <div class="carousel-item active">
      <svg class="bd-placeholder-img" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="var(--bs-secondary-color)"/></svg>
      <div class="container">
        <div class="carousel-caption text-start">
          <h1>Example headline.</h1>
          <p class="opacity-75">Some representative placeholder content for the first slide of the carousel.</p>
         
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <svg class="bd-placeholder-img" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="var(--bs-secondary-color)"/></svg>
      <div class="container">
        <div class="carousel-caption">
          <h1>Another example headline.</h1>
          <p>Some representative placeholder content for the second slide of the carousel.</p>
          
        </div>
      </div>
    </div>
    <div class="carousel-item">
      <svg class="bd-placeholder-img" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="var(--bs-secondary-color)"/></svg>
      <div class="container">
        <div class="carousel-caption text-end">
          <h1>One more for good measure.</h1>
          <p>Some representative placeholder content for the third slide of this carousel.</p>
         
        </div>
      </div>
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>
    <h1>cadena de adn</h1>
    <button class="button1" id="h">Generar cadena ADN</button>
    <h3>Doble Hélice:</h3>
    <h4 id="c1"></h4>
    <h2 id="c2"></h2>
    <h3>ARN:</h3>
    <h4 id="arn"></h4>
    <h5 id="codons"></h5>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    <script>
      
function random(x){
    let numeroFinal = Math.random() * x;
    numeroFinal = Math.floor(numeroFinal);
    return numeroFinal
}

function ADNARN(x){
    let cadena = "ATG"
    let cadena2 = ""
    let arn = ""
    let codones = []

    let proteinas= [
        "TTT", "TTA", "TTG", "TTC",
        "TAT", "TAC",
        "TGT", "TGG", "TGC",
        "TCT", "TCA", "TCG", "TCC",
        "ATT", "ATA", "ATG", "ATC",
        "AAT", "AAA", "AAG", "AAC",
        "AGT", "AGA", "AGG", "AGC",
        "ACT", "ACA", "ACG", "ACC",
        "CTT", "CTA", "CTG", "CTC",
        "CAT", "CAA", "CAG", "CAC",
        "CGT", "CGA", "CGG", "CGC",
        "CCT", "CCA", "CCG", "CCC",
        "GTT", "GTA", "GTG", "GTC",
        "GAT", "GAA", "GAG", "GAC",
        "GGT", "GGA", "GGG", "GGC",
        "GCT", "GCA", "GCG", "GCC"
        ];

        for (i=0; i<x; i++){
        cadena+=proteinas[random(61)]
        }

        let fin = ["TAG", "TGA", "TAA"]
        
        cadena += fin[random(3)]

      for(elem of cadena){
        switch (elem) {
            case 'A':
                cadena2+= 'T'
                arn+= 'A'
                break
                case 'C':
                cadena2+= 'G'
                arn += 'C'
                break
                case 'T':
                cadena2+= 'A'
                arn += 'U'
                break
                case 'G':
                    cadena2+= 'C'
                    arn += 'G'
                    break
            default:
                break;
        }
    }

    for(let i=0; i<arn.length; i= i+3){
        let prote = arn[i] + arn[i+1] + arn[i+2]
        switch (prote) {

            case 'AAA' :
            case 'AAG' :
            codones.push(" Lisina")
            break;

            case 'UUU':
            case 'UUC':
            codones.push(" Felinanalina")
            break;
            
            case 'UUG':
            case "CUU":
            case "CUC":
            case 'CUA':
            case 'CUG':
            case 'UUA':
            codones.push(" Leucina")
            break;

            case 'AUU' :
            case'AUC' :
            case 'AUA' :
            codones.push(' Isoleucina')
            break;

            case 'AUG' :
            codones.push(' Metionina')
            break;

            case "GUA":
            case "GUU":
            case "GUC":
            case "GUG":
            codones.push(" Valina");
            break;

            case 'UCU':
            case 'UCA':
            case 'UCC' :
            case 'UCG' :
            case 'AGU' :
            case 'AGC' :
            codones.push(' Serina')
            break;

            case 'CCU':
            case 'CCC':
            case 'CCA' :
            case 'CCG' :
            codones.push(' Prolina')
            break;

            case 'ACU':
            case 'ACC':
            case 'ACA' :
            case 'ACG' :
            codones.push(' Treonina')
            break;

            case 'GCU':
            case 'GCC':
            case 'GCA' :
            case 'GCG' :
            codones.push(' Alanina')
            break;

            case 'UAU' :
            case 'UAC' :
            codones.push(' Tirosina')
            break;

            case 'UAA' :
            case 'UAG' :
            case 'UGA' :
            codones.push(' STOP')
            break;

            case 'CAU' :
            case 'CAC' :
            codones.push(' Histidina')
            break;

            case 'CAA' :
            case 'CAG' :
            codones.push(' Glutamina')
            break;

            case 'AAU' :
            case 'AAC' :
            codones.push(' Asparagina')
            break;

            case 'GAA' :
            case 'GAG' :
            codones.push(' Ácido Glutámico')
            break;

            case 'GAU' :
            case 'GAC' :
            codones.push(' Ácido Aspártico')

            case 'UGG' :
            codones.push(' Triptófano')
            break;

            case 'UGU' :
            case 'UGC' :
            codones.push(" Clisteína")
            break;

            case 'AGG':
            case "AGA":
            case "CGG":
            case 'CGA':
            case 'CGC':
            case 'CGU':
            codones.push(" Arginina")
            break;
            
            case 'GGU':
            case 'GGC':
            case 'GGA' :
            case 'GGG' :
            codones.push(' Glicina')
            break;

            default:
            break;
        }
codones[0] = "Metionina (de inicio)"
    }
    let adn = {
        ADN: {
            helice1: cadena,
            helice2: cadena2
        },
        ARN : arn,
        codones: codones
    }
    
    
    
        return adn
        

}

const boton = document.getElementById('h');
const C1HTML= document.getElementById("c1");
const C2HTML = document.getElementById("c2");
const ARNHTML = document.getElementById("arn");
const CODONS = document.getElementById("codons")

boton.addEventListener("click", function() {
    console.log("generando")
    let newADN = ADNARN(4)
    C1HTML.textContent = newADN.ADN.helice1
    C2HTML.textContent = newADN.ADN.helice2
    ARNHTML.textContent = newADN.ARN
    CODONS.textContent = newADN.codones


})
console.log(ADNARN(20))
    </script>

</body>
</html>